#!/usr/bin/env ruby
require 'open3'
def indent(string)
  puts "       #{string}"
end

def print_results(output)
  output.split(/\n/).map { |s| indent(s) }
end

def slurp(filename)
  File.read(slurp)
rescue
  nil
end

puts "-----> Decrypting configuration settings"

build_dir, cache_dir, env_dir = ARGV

ENV["DOTENV_ENCRYPTION_KEY"] = slurp("#{env_dir}/DOTENV_ENCRYPTION_KEY")
dotenv_encrypted_name        = slurp("#{env_dir}/DOTENV_ENCRYPTED_FILE")
dotenv_plaintext_name        = slurp("#{env_dir}/DOTENV_PLAINTEXT_FILE")

unless ENV["DOTENV_ENCRYPTION_KEY"]
  indent("no DOTENV_ENCRYPTION_KEY specified")
  exit 1
end

unless dotenv_encrypted_name
  indent("no DOTENV_ENCRYPTED_FILE specified")
  exit 1
end

unless dotenv_plaintext_name
  indent("no DOTENV_PLAINTEXT_NAME specified")
  exit 1
end

infile  = "#{build_dir}/#{dotenv_encrypted_name}"
outfile = "#{build_dir}/#{dotenv_plaintext_name}"

unless File.exists?(infile)
  indent("Can't find #{infile} to decrypt.")
  exit 1
end

indent("processing #{infile}")

command = "openssl enc -aes-256-cbc -d -in #{infile} -out #{outfile} -pass env:DOTENV_ENCRYPTION_KEY"

Open3.popen3(command) do |stdin, stdout, stderr, status|
  if status.value.success?
    print_results(stdout.read)
    exit 0
  else
    print_results(stderr.read)
    exit 1
  end
end
